name: Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main
permissions:
      id-token: write 
      contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Run pre-commit checks
        run: |
          echo 'repos:
            - repo: https://github.com/psf/black
              rev: 23.9.1
              hooks:
                - id: black
            - repo: https://github.com/PyCQA/isort
              rev: 5.12.0
              hooks:
                - id: isort
          ' > .pre-commit-config.yaml
          pre-commit run --all-files

  build-and-deploy:
      needs: lint
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        
        - name: Create .env file from secret
          run: echo "${{ secrets.ENV_FILE }}" > .env

        - name: Cache Poetry dependencies
          uses: actions/cache@v3
          with:
            path: ~/.cache/pypoetry
            key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
            restore-keys: |
              ${{ runner.os }}-poetry-

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install poetry
            poetry install --no-interaction --no-ansi

        - name: Cache Docker layers
          uses: actions/cache@v3
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-

        - name: Build Docker image
          run: |
            docker build -f Dockerfile -t ${{ secrets.ECR_REPOSITORY }} . || exit 1

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: ${{ secrets.AWS_REGION }}
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

        - name: Login to AWS ECR
          uses: aws-actions/amazon-ecr-login@v1

        - name: Push Docker image to ECR
          run: |
            IMAGE_TAG="latest"
            docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_URI }}:${IMAGE_TAG}
            docker push ${{ secrets.ECR_URI }}:${IMAGE_TAG} || exit 1
            echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

        - name: Fetch ECS info from SSM
          id: ecs-info
          run: |
            ECS_CLUSTER_NAME=$(aws ssm get-parameter --name "/ecs/cluster-name" --query "Parameter.Value" --output text)
            ECS_SERVICE_NAME=$(aws ssm get-parameter --name "/ecs/service-name" --query "Parameter.Value" --output text)
            ECS_TASK_DEFINITION_FAMILY=$(aws ssm get-parameter --name "/ecs/task-definition-family" --query "Parameter.Value" --output text)
            echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME" >> $GITHUB_ENV
            echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION_FAMILY=$ECS_TASK_DEFINITION_FAMILY" >> $GITHUB_ENV

        - name: Get current task definition
          id: task-def
          run: |
            TASK_DEF_ARN=$(aws ecs describe-task-definition \
              --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
              --query "taskDefinition.taskDefinitionArn" \
              --output text)
            
            aws ecs describe-task-definition \
              --task-definition $TASK_DEF_ARN \
              --include TAGS \
              --output json > task-def-full.json
            
            jq '.taskDefinition' task-def-full.json > task-def.json

        - name: Clean task definition for registration
          run: |
            # Capture the container definitions and other fields from task-def.json
            CONTAINER_DEFS=$(jq '.containerDefinitions' task-def.json)
            CPU=$(jq -r '.cpu // "256"' task-def.json)
            MEMORY=$(jq -r '.memory // "512"' task-def.json)
            EXECUTION_ROLE=$(jq -r '.executionRoleArn // "null"' task-def.json)
            TASK_ROLE=$(jq -r '.taskRoleArn // "null"' task-def.json)
            NETWORK_MODE=$(jq -r '.networkMode // "awsvpc"' task-def.json)

            # Create clean JSON with proper quoting for string values
            cat <<EOF > clean-task-def.json
            {
              "family": "maatalys-task",
              "containerDefinitions": ${CONTAINER_DEFS},
              "cpu": "$CPU",
              "memory": "$MEMORY",
              "executionRoleArn": "$EXECUTION_ROLE",
              "taskRoleArn": "$TASK_ROLE",
              "networkMode": "$NETWORK_MODE"
            }
            EOF

                echo "Cleaned task definition:"
                cat clean-task-def.json